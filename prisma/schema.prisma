// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Major {
  softwareDeveloper
  webDeveloper
  mobileDeveloper
  dataScientist
  devOps
  networkEngineer

  accountant
  salesRepresentative
  marketingManager
  humanResources
  businessAnalyst
  projectManager

  writer
  artist
  designer
  graphicDesigner
  photographer

  schoolTeacher
  curriculumDeveloper
  tutor
}

enum WorkStyle {
  remote
  hybird
  onSite
}

enum ApplicationStatus {
  canceled
  candidateScreening
  interview
  successed
}

enum UserRole {
  hirer
  jobSeeker
}

enum JobType {
  fullTime
  partTime
  volunteer
  internship
}

model Job {
  id                  String        @id @default(uuid())
  createdAt           DateTime      @default(now())
  title               String
  description         String
  major               Major
  keywords            String[] // Insted of Skills[]
  keywordsLowerCase   String[]
  hirer               Hirer         @relation(fields: [hirerId], references: [id], onDelete: Cascade)
  hirerId             String
  requiredExperiences Int
  workStyle           WorkStyle
  address             String?
  salaryRange         Int[]
  jobType             JobType       @default(fullTime)
  startDate           DateTime      @default(now())
  endDate             DateTime
  jobSaved            JobSeeker[]
  applications        Application[]
}

model Application {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now())
  coverLetter  String
  documentName String
  document     Bytes
  notes        String?
  status       ApplicationStatus @default(candidateScreening)
  jobSeeker    JobSeeker         @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  jobSeekerId  String
  job          Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId        String
  @@unique([jobSeekerId, jobId])
}

model Link {
  id     String @id @default(uuid())
  name   String
  url    String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model User {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  headline     String?
  name         String
  email        String         @unique
  password     String
  role         UserRole
  links        Link[]
  contactEmail String?
  jobSeeker    JobSeeker?
  hirer        Hirer?
  notification Notification[]
}

enum ComapnySize {
  lessThan10
  between10to20
  between20to30
  between30to50
  between50to100
  heigherThan100
}

model Hirer {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique
  location    String?
  companySize ComapnySize @default(lessThan10)
  followers   JobSeeker[]
  jobPosts    Job[]
}

model JobSeeker {
  id                String        @id @default(uuid())
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String        @unique
  keywords          String[]
  keywordsLowerCase String[]
  major             Major
  yearsExperience   Int
  savedJobs         Job[]
  experiences       Experience[]
  applications      Application[]
  following         Hirer[]
}

model Experience {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  title       String
  description String
  link        String?
  startDate   DateTime
  endDate     DateTime  @default(now())
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  jobSeekerId String
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  content   String
  link      String? 
  fromWho   String
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
